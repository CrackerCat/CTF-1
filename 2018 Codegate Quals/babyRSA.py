g = 14511485561279877242490049924164262671564856980418706493772866848857612385453104346586350276227873984815502106112389832011566814347565705873657427101510533972939335373118027470906354834216983842099812965592939768854241417529908124711818216182341332507918374220901579987851767888710421089266081280013256600425746557269742268670300714949183260246617797156425767983027415373581836147225552931559016487193903056680274018867169067069164417868649729813464306199388375773268972224468436723728788928618254041886532217172217283880677562744928063668302190530092708676086756514664006766909499651097644447881334032649057611965077951245778537347658519214651268439995915614667939336569800565797702566887133370244643122543689011224353239395653153094885449557256699923700742653930928887024447374907536229536501931493386170594869542262576409686250950887746501725676758035668270309685358291271363775138099327895323451901829587908987436831617628346535627562925010698445652286450107659802164994355539623617745529876829000553355956755914526849056343372137493951531663650121127924626353148067965144997177441402726593083629261964699315644045714647617156724816370270635144953182744245498998992807987174252376199074131496163299914588620694929584594866873400406185502626180264465104468365933575409921644759774899908018217623256295871823903858740112075223018089096313796599554636163186830200265892525403238639070366999401808068998639590975305617369688731214141047568939908240058088089504343104889824160334560324387496383256518400827927341943755279126157377196722373876343583757261084975726106468397487366825775319965557539853162973895788663508023419482720093445137085452233528426725965549266605359644884153719762909553953900709890192728260024241748671796401590112629479273363064208874240854298225057415248756216847693518038319188675206377870041466557414694779134628404260587970

h = 200972731730097636976827049698214756107439330058946586294810837394189769656758467301378455256704981506024979360358854939307759891385801491668590432728409172325924823845795802068569504027458509726942683684845099685005724309372842055251251103232234279320256975662933177657993600463290652464246399357992101963313348397652939723188131041888535203383479379782750484175239116419074864386243581748425119257869351582631464696880797553969260415636591522791709442079709586828716914705946883433533874750682958642851920347897328709815665287336267018234850211541263570668304013958387590188226346947851729783080697306777656948546082

N = 523639805914061918270627443134741619704989339108811345591765650823383811679404400743730300288077320843234806116907796484315512386749183735427076044515394957782722144465236043561036957495670530886847413432636828661793513741180618385135095922719611444315861194066682307139969523206842728092440966461922557111209480112023032164065707216752568624317883094770784553451376502893748762652573604180632157059219119741129827017117558208565054860250853978397405747507844727903363351081745897472675235414693294079400158465019978970101063161094836772073302365997371679643083941089269169502839517043186914783290465318781726781533226599462066259256698885200843104424722505593942510854302401488139137362276492532699951880474157691347473741517183512613811731637427562990396497067805682564174185792379491573312640862381843195615293946630128509982267460922475624107750277459002662884836031305873522960659017891138316482378312004790485681371129328860344989214941450460756203906709954285455206483931555441550631622907560476932030275168094874500348941952385811045752980245084909805234648503736291123092594689494187215718382724496356220857628352007757197464098872772987476828030721472777531411032286344430474215475330008833588291692767417022829531866323051

sub = 0xdeadbeef

sumarr = []
mularr = []

for i in range(0, 1024):
	for j in range(0, 1024):
		s = ((i + j) ^ (i - j)) % 1024
	
		m = i * (j-sub) % 1024

		sumarr.append(s)
		mularr.append(m)
	
hmod = h % 1024
gmod = g % 1024
	
vi = []
vj = []

for i in range(0, 1024*1024):
	if sumarr[i] == hmod and mularr[i] == gmod:
		print "i: " + str(i/1024)
		print "j: " + str(i%1024)
		vi.append(i / 1024)
		vj.append(i % 1024)

print vi
print vj

#############################################################

for loop in xrange(409):
	sumarr = []
	mularr = []

	for i in xrange(len(vi)):
		sumarr.append([])
		mularr.append([])

	for i in xrange(len(vi)):
		for j in range(0, 32):
			for k in range(0, 32):
				v1 = 2**(10+5*loop) * j + vi[i]
				v2 = 2**(10+5*loop) * k + vj[i]
				s = ((v1 + v2) ^ (v1 - v2)) % 2**(15+5*loop)
				if(s < 0):
					s += 2**(15+5*loop)

				m = v1 * (v2 - sub) % 2**(15+5*loop)
				if(m < 0):
					m += 2**(15+5*loop)

				sumarr[i].append(s)
				mularr[i].append(m)

	hmod = h % 2**(15+5*loop)
	gmod = g % 2**(15+5*loop)

	vi_ = []
	vj_ = []

	for i in range(len(vi)):
		for j in range(0, 1024):
			if sumarr[i][j] == hmod and mularr[i][j] == gmod:
				vi_.append(vi[i]+2**(10+5*loop)*(j/32))
				vj_.append(vj[i]+2**(10+5*loop)*(j%32))
	print str(loop)
	print len(vi_)
	print len(vj_)
	print "\n"

	if loop >= 407:
		for p in vj_:
			if N % p == 0:
				print "p found!"
				print "p val: " + hex(p)

	vi = vi_
	vj = vj_
